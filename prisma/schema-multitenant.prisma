generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// TENANT MODEL - Core Multi-tenancy Entity
// ============================================================================
model Tenant {
  id          String   @id @default(cuid())
  name        String   // Clinic name
  subdomain   String   @unique // clinic1.pawdex.com
  slug        String   @unique // URL-friendly identifier
  email       String?  // Primary contact email
  phone       String?  // Primary contact phone
  address     String?  // Clinic address
  settings    Json     @default("{}") // Tenant-specific configuration
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Tenant-specific relationships
  users        User[]
  patients     Patient[]
  appointments Appointment[]
  
  @@map("tenants")
}

// ============================================================================
// GLOBAL/SHARED ENTITIES (No tenant isolation)
// ============================================================================
model Species {
  id       String    @id
  name     String    @unique
  isActive Boolean   @default(true)
  breeds   Breed[]
  patients Patient[]

  @@map("species")
}

model Breed {
  id        String    @id
  name      String
  speciesId String
  isActive  Boolean   @default(true)
  species   Species   @relation(fields: [speciesId], references: [id])
  patients  Patient[]

  @@unique([name, speciesId])
  @@map("breeds")
}

model AppointmentStatus {
  id           String        @id
  name         String        @unique
  description  String?
  isActive     Boolean       @default(true)
  appointments Appointment[]

  @@map("appointment_statuses")
}

model UserRole {
  id           String            @id
  name         String            @unique
  description  String?
  isActive     Boolean           @default(true)
  permissions  RolePermission[]
  users        User[]
  featureFlags RoleFeatureFlag[]

  @@map("user_roles")
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         UserRole   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// ============================================================================
// TENANT-SPECIFIC ENTITIES (With tenant isolation)
// ============================================================================
model Patient {
  id           String        @id @default(cuid())
  tenantId     String        // TENANT ISOLATION
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  speciesId    String
  breedId      String?
  gender       String
  birthDate    DateTime
  ownerId      String        // Reference to User (pet owner)
  tags         String        @default("[]")
  isActive     Boolean       @default(true)
  
  // Relationships
  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  breed        Breed?        @relation(fields: [breedId], references: [id])
  species      Species       @relation(fields: [speciesId], references: [id])
  owner        User          @relation("PatientOwner", fields: [ownerId], references: [id])

  // Indexes for performance
  @@index([tenantId])
  @@index([tenantId, ownerId])
  @@map("patients")
}

model Appointment {
  id            String            @id @default(cuid())
  tenantId      String            // TENANT ISOLATION
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  patientId     String
  vetId         String
  date          DateTime
  duration      Int
  reason        String
  statusId      String
  notes         String?
  estimatedCost Float?
  
  // Relationships
  tenant        Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  patient       Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  status        AppointmentStatus @relation(fields: [statusId], references: [id])
  vet           User              @relation("VetAppointments", fields: [vetId], references: [id])

  // Indexes for performance
  @@index([tenantId])
  @@index([tenantId, date])
  @@index([tenantId, vetId])
  @@index([tenantId, patientId])
  @@map("appointments")
}

model User {
  id                    String        @id @default(cuid())
  tenantId              String        // TENANT ISOLATION
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  email                 String        
  name                  String
  password              String
  roleId                String
  isActive              Boolean       @default(true)
  refreshToken          String?
  refreshTokenExpiresAt DateTime?
  
  // Relationships
  tenant                Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  role                  UserRole      @relation(fields: [roleId], references: [id])
  vetAppointments       Appointment[] @relation("VetAppointments")
  ownedPatients         Patient[]     @relation("PatientOwner")

  // Unique constraints per tenant
  @@unique([tenantId, email])
  @@index([tenantId])
  @@map("users")
}

// ============================================================================
// FEATURE FLAGS (Global - can be made tenant-specific later if needed)
// ============================================================================
model FeatureCategory {
  id           String        @id @default(cuid())
  name         String        @unique
  description  String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  featureFlags FeatureFlag[]

  @@map("feature_categories")
}

model FeatureFlag {
  id          String            @id @default(cuid())
  key         String            @unique
  name        String
  description String?
  isActive    Boolean           @default(true)
  isGlobal    Boolean           @default(false)
  categoryId  String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  category    FeatureCategory?  @relation(fields: [categoryId], references: [id])
  roleFlags   RoleFeatureFlag[]

  @@map("feature_flags")
}

model RoleFeatureFlag {
  id            String      @id @default(cuid())
  roleId        String
  featureFlagId String
  isEnabled     Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  role          UserRole    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  featureFlag   FeatureFlag @relation(fields: [featureFlagId], references: [id], onDelete: Cascade)

  @@unique([roleId, featureFlagId])
  @@map("role_feature_flags")
}